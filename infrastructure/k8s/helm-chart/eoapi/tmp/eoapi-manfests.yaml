
---
# Source: eoapi/templates/db/manifest.yaml
apiVersion: v1
kind: Secret
metadata:
  name: pgstac-secrets
type: "Opaque"
stringData:
  DB_MAX_CONN_SIZE: "10"
  DB_MIN_CONN_SIZE: "1"
  PGDATA: "/var/lib/postgresql/data/pgdata"
  PGDATABASE: "postgis"
  POSTGRES_DBNAME: "postgis"
  PGPASSWORD: "password"
  POSTGRES_PASS: "password"
  PGUSER: "username"
  POSTGRES_DB: "postgis"
  POSTGRES_DBNAME: "postgis"
  POSTGRES_HOST: "pgstac"
  POSTGRES_HOST_READER: "pgstac"
  POSTGRES_HOST_WRITER: "pgstac"
  POSTGRES_PASS: "password"
  POSTGRES_PASSWORD: "password"
  POSTGRES_PORT: "5432"
  POSTGRES_USER: "username"
---
# Source: eoapi/templates/db/manifest.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pgstac-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
# Source: eoapi/templates/db/manifest.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: pgstac
  name: pgstac
spec:
  ports:
  - name: "5432"
    port: 5432
    targetPort: 5432
  selector:
    app: pgstac
---
# Source: eoapi/templates/db/manifest.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgstac
  labels:
    app: pgstac
spec:
  selector:
    matchLabels:
      app: pgstac
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: pgstac
    spec:
      restartPolicy: Always
      containers:
        - name: pgstac
          image: ghcr.io/stac-utils/pgstac:v0.7.1
          args:
            - "postgres"
            - "-N"
            - "500"
          envFrom:
            # NOTE: there's no reason we need to use a `ConfigMap` or `Secret` here to get os env vars into the pod.
            # we could just template them out here immediately with `value: $_` but this allows us
            # to store them in k8s intermediately and change them and then bounce deploys if needed
          - secretRef:
              name: pgstac-secrets
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: pgstac-claim
      volumes:
        - name: pgstac-claim
          persistentVolumeClaim:
            claimName: pgstac-claim
---
# Source: eoapi/templates/services/manifest.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: raster-envvar-configmap
data:
  CPL_VSIL_CURL_ALLOWED_EXTENSIONS: ".tif,.TIF,.tiff"
  GDAL_CACHEMAX: "200"
  GDAL_DISABLE_READDIR_ON_OPEN: "EMPTY_DIR"
  GDAL_HTTP_MERGE_CONSECUTIVE_RANGES: "YES"
  GDAL_HTTP_MULTIPLEX: "YES"
  GDAL_HTTP_VERSION: "2"
  GDAL_INGESTED_BYTES_AT_OPEN: "32768"
  HOST: "0.0.0.0"
  PORT: "8080"
  PYTHONWARNINGS: "ignore"
  VSI_CACHE: "TRUE"
  VSI_CACHE_SIZE: "5000000"
  WEB_CONCURRENCY: "10"
---
# Source: eoapi/templates/services/manifest.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: stac-envvar-configmap
data:
  HOST: "0.0.0.0"
  PORT: "8080"
  TITILER_ENDPOINT: "raster:8080"
  WEB_CONCURRENCY: "10"
---
# Source: eoapi/templates/services/manifest.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: vector-envvar-configmap
data:
  HOST: "0.0.0.0"
  PORT: "8080"
  TIPG_CATALOG_TTL: "0"
  WEB_CONCURRENCY: "10"
---
# Source: eoapi/templates/services/manifest.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: raster
  name: raster
spec:
  type: NodePort
  ports:
  - name: '8080'
    port: 8080
    targetPort: 8080
  selector:
    app: raster
---
# Source: eoapi/templates/services/manifest.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: stac
  name: stac
spec:
  type: NodePort
  ports:
  - name: '8080'
    port: 8080
    targetPort: 8080
  selector:
    app: stac
---
# Source: eoapi/templates/services/manifest.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vector
  name: vector
spec:
  type: NodePort
  ports:
  - name: '8080'
    port: 8080
    targetPort: 8080
  selector:
    app: vector
---
# Source: eoapi/templates/services/manifest.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: raster
    gitsha: a5ba4b476b
  name: raster
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: raster
  template:
    metadata:
      labels:
        app: raster
    spec:
      containers:
      - image: ghcr.io/developmentseed/eoapi-raster:latest
        name: raster
        ports:
          - containerPort: 8080
        resources:
          limits:
            cpu: 512m
            memory: 4096M
          requests:
            cpu: 256m
            memory: 3072M
        envFrom:
          # NOTE: there's no reason we need to use a `ConfigMap` or `Secret` here to get os env vars into the pod.
          # we could just template them out here immediately with `value: $_` but this allows us
          # to store them in k8s intermediately and change them and then bounce deploys if needed
        - secretRef:
            name: pgstac-secrets
        - configMapRef:
            name: raster-envvar-configmap
---
# Source: eoapi/templates/services/manifest.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: stac
    gitsha: a5ba4b476b
  name: stac
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: stac
  template:
    metadata:
      labels:
        app: stac
    spec:
      containers:
      - image: ghcr.io/developmentseed/eoapi-stac:latest
        name: stac
        ports:
          - containerPort: 8080
        resources:
          limits:
            cpu: 512m
            memory: 1024Mi
          requests:
            cpu: 256m
            memory: 256Mi
        envFrom:
          # NOTE: there's no reason we need to use a `ConfigMap` or `Secret` here to get os env vars into the pod.
          # we could just template them out here immediately with `value: $_` but this allows us
          # to store them in k8s intermediately and change them and then bounce deploys if needed
        - secretRef:
            name: pgstac-secrets
        - configMapRef:
            name: stac-envvar-configmap
---
# Source: eoapi/templates/services/manifest.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vector
    gitsha: a5ba4b476b
  name: vector
spec:
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: vector
  template:
    metadata:
      labels:
        app: vector
    spec:
      containers:
      - image: ghcr.io/developmentseed/eoapi-vector:latest
        name: vector
        ports:
          - containerPort: 8080
        resources:
          limits:
            cpu: 512m
            memory: 1024Mi
          requests:
            cpu: 256m
            memory: 256Mi
        envFrom:
          # NOTE: there's no reason we need to use a `ConfigMap` or `Secret` here to get os env vars into the pod.
          # we could just template them out here immediately with `value: $_` but this allows us
          # to store them in k8s intermediately and change them and then bounce deploys if needed
        - secretRef:
            name: pgstac-secrets
        - configMapRef:
            name: vector-envvar-configmap
---
# Source: eoapi/templates/services/manifest.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: raster
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: instance
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: raster
                port:
                  number: 8080
---
# Source: eoapi/templates/services/manifest.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: stac
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: instance
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: stac
                port:
                  number: 8080
---
# Source: eoapi/templates/services/manifest.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vector
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: instance
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: vector
                port:
                  number: 8080
