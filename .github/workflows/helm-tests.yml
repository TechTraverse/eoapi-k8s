name: CI

# On every pull request, but only on push to main
on:
  push:
    branches:
    - '*'
    tags:
    - '*'
    paths: []
    # only run jobs if some code have changed
    #- 'helm-chart/eoapi/**'
  pull_request:

jobs:
  helm-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: d3adb5/helm-unittest-action@v2
        with:
          helm-version: v3.8.2
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - run: |
          cd helm-chart
          helm unittest eoapi -f 'tests/*.yaml' -v eoapi/test-helm-values.yaml
  unittests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: azure/setup-helm@v3

      - name: start minikube
        uses: medyagh/setup-minikube@master

      - name: test the cluster
        run: kubectl get pods -A

      - name: build images for unit tests
        run: |
          export SHELL=/bin/bash
          eval $(minikube -p minikube docker-env)
          docker build -f ./dockerfiles/Dockerfile.pgstac -t local/pgstac .
          docker build -f ./dockerfiles/Dockerfile.stac -t local/stac .
          docker build -f ./dockerfiles/Dockerfile.titiler -t local/titiler .
          docker build -f ./dockerfiles/Dockerfile.tipg -t local/tipg .
          echo -n "verifying images:"
          docker images

      - name: render raster templates
        run: |
          export PGUSER=username
          export POSTGRES_USER=username
          export PGPASSWORD=password
          export POSTGRES_PASSWORD=password
          export GITSHA='A12345'

          cd helm-chart/eoapi

          MANIFEST=eoapi-manfests.yaml
          echo "" > $MANIFEST
          MANIFESTS=$(find ./templates/* -name "*.yaml" -not -name "ingress*.yaml")
          while read MFILE; do
            path_without_dot_prefix=$(echo "$MFILE" | sed 's/^\.\///g')
            printf "[ RENDERING ]: %s\n" "$path_without_dot_prefix"
            helm template . \
              -s $path_without_dot_prefix \
              --set gitSha=$GITSHA \
              --set db.settings.secrets.PGUSER=$PGUSER \
              --set db.settings.secrets.POSTGRES_USER=$POSTGRES_USER \
              --set db.settings.secrets.PGPASSWORD=$PGPASSWORD \
              --set db.settings.secrets.POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
              -f values.yaml \
              -f test-unittest-values.yaml >> $MANIFEST
          done < <(echo "$MANIFESTS")

      - name: deploy to minikube
        run: |
          cd helm-chart/eoapi
          kubectl apply -f eoapi-manfests.yaml

      - name: sleep for 5s seconds while services boot
        run: sleep 5s
        shell: bash

      - name: restart the services
        run: |
          # usually if a pod fails b/c the DB isn't up yet it will go into CrashLoopBack state
          # and try to restart itself then on the second try be able to connect
          # minikube doesn't seem to do this by default so we force it to happen by deleting the `/pod`
          # and therefore the deployment will restart the pod
          kubectl get pod  | grep '^vector-.*$' | cut -d' ' -f1 | xargs -I{} kubectl delete pod/{}
          kubectl get pod  | grep '^stac-.*$'  | cut -d' ' -f1 | xargs -I{} kubectl delete pod/{}
          kubectl get pod  | grep '^raster-.*$'  | cut -d' ' -f1 | xargs -I{} kubectl delete pod/{}

      - name: sleep for 10s seconds while services restart
        run: sleep 10s
        shell: bash

      - name: test service urls
        run: |
          minikube service list
#          echo "------------------opening the service------------------"
#          URL=$(minikube service vector --url)
#          curl -XGET "$URL/collections"
#          URL=$(minikube service stac --url)
#          curl -XGET "$URL"
#          URL=$(minikube service raster --url)
#          curl -XGET "$URL"

      - name: setup upterm session
        uses: lhotari/action-upterm@v1

      - name: install python unit-test dependencies
        run: |
          python -m pip install pytest pytest-asycio httpx

      - name: run the tests
        run: |
          # first substitute test enpoints in the test files
          # TODO: pytest should be able to have a pattern for injection here but htis is quicker
          URL=$(minikube service vector --url)
          sed -i "s|vector_endpoint\=.*$|vector_endpoint\='$URL/vector'|g" .github/workflows/tests/test_vector.py
          head -n 5 github/workflows/tests/test_vector.py
          pytest github/workflows/tests/test_vector.py

          URL=$(minikube service stac --url)
          sed -i "s|stac_endpoint\=.*$|stac_endpoint\='$URL/stac'|g" .github/workflows/tests/test_stac.py
          head -n 5 github/workflows/tests/test_stac.py
          pytest github/workflows/tests/test_stac.py

          URL=$(minikube service raster --url)
          sed -i "s|raster_endpoint\=.*$|raster_endpoint\='$URL/raster'|g" .github/workflows/tests/test_raster.py
          head -n 5 github/workflows/tests/test_raster.py
          pytest github/workflows/tests/test_raster.py


